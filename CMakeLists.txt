cmake_minimum_required(VERSION 3.20)

set(ROOT_DIR ${CMAKE_SOURCE_DIR})
set(SOURCE_DIR ${ROOT_DIR}/src)
set(GLOBAL_HEADERS ${ROOT_DIR}/include)

set(CMAKE_MODULE_PATH ${ROOT_DIR}/cmake ${ROOT_DIR}/cmake/packages)
set(WHOLE_PROJECT_NAME "gecco2023")

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

set(INCLUDE_EXECUTABLE ON CACHE BOOL "If the project delivers an executable")
set(INSTALL_LIBRARY ON CACHE BOOL "If the project delivers a library")

project(${WHOLE_PROJECT_NAME})

include(GNUInstallDirs)
message(STATUS "Installing in ${CMAKE_INSTALL_BINDIR},
${CMAKE_INSTALL_LIBDIR}/nlshade and ${CMAKE_INSTALL_INCLUDEDIR}/nlshade")
set(TARGET_HEADERS_LOCATION "${CMAKE_INSTALL_FULL_INCLUDEDIR}/nlshade/${LIBRARY_COMPONENT_NAME}")


set(CMAKE_SYSTEM_NAME Linux)
set(CMAKE_SYSTEM_PROCESSOR amd64)

find_package(fmt REQUIRED)

set(DIAGNOSTIC_FLAGS "-Wall -Wextra -Wshadow -Wdouble-promotion -Wformat -Wundef -fno-common -Wconversion")
set(DEBUG_FLAGS "-g3 -O0")
set(OPTIMIZATION_FLAGS "-O3 -DNDEBUG")

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${DIAGNOSTIC_FLAGS} -std=c2x")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${DIAGNOSTIC_FLAGS} -std=c++2a")
set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS} ${SANITIZER_FLAGS} ${DEBUG_FLAGS}")
set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS} ${OPTIMIZATION_FLAGS}")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS} ${SANITIZER_FLAGS} ${DEBUG_FLAGS}")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS} ${OPTIMIZATION_FLAGS}")

set_property(GLOBAL PROPERTY USE_FOLDERS on)

set(CMAKE_BINARY_DIR ${ROOT_DIR}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/exe)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/archive)


include_directories(${GLOBAL_HEADERS})

add_subdirectory(src)

